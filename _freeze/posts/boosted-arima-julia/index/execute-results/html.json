{
  "hash": "202460bc96a63165e7fe68acae131049",
  "result": {
    "markdown": "---\ntitle: \"Boosting an ARIMA model in Julia\"\ndate: \"2023-01-05\"\ncategories: [state space models / modelos de espacios de estados, JuliaLang, ARIMA, Boosting]\nimage: \"filter.jpg\"\nlang: en\ndraft: true\nbibliography: references.bib\nabstract: \"Here you'll learn how to boost your ARIMA model with Julia.\"\ncrossref:\n  eq-prefix: Eq\nformat:\n  html:\n    code-fold: false\n---\n\n\n# Boosting ARIMA\n\nI first came into contact with boosted ARIMA with the now defunct [boostime](https://github.com/AlbertoAlmuinha/boostime) package in R. The idea was quite simple: time series models are not perfect and the errors (residuals) might not be *completely* white noise. There might be patterns that the model was not able to capture. It is of these gaps that an additional boosting model might take advantage.\n\nThe main idea of boosting the ARIMA model is constructing a model which combines both the ARIMA and a boosting algorithm for the residuals:\n\n```\n                        Predictions = ARIMA(data) + BOOST(residuals)\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n\nFor the purpose of our model we'll use the `XGBoost.jl` and `StateSpaceModels.jl` packages. \n\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing XGBoost, StateSpaceModels, DataFrames, CSV, Plots\n```\n:::\n\n\nOne of the default datasets is the Air Passengers dataset (a classic from [Box _et al_](https://www.wiley.com/en-us/Time+Series+Analysis:+Forecasting+and+Control,+5th+Edition-p-9781118675021) !) which contains information of the total amount of passengers in a US airline from 1949 to 1960. \n\n\n::: {.cell}\n\n```{.julia .cell-code}\npassengers = CSV.read(StateSpaceModels.AIR_PASSENGERS, DataFrame)\n```\n:::\n\n\nThe first entries of the `DataFrame` look like this:\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nfirst(passengers, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5×2 DataFrame\n Row │ month       passengers\n     │ Date        Int64\n─────┼────────────────────────\n   1 │ 1949-01-01         112\n   2 │ 1949-02-01         118\n   3 │ 1949-03-01         132\n   4 │ 1949-04-01         129\n   5 │ 1949-05-01         121\n```\n:::\n:::\n\n\nNow to properly fit the model one should perform [a decomposition](https://otexts.com/fpp2/components.html), check the [PACF](https://en.wikipedia.org/wiki/Partial_autocorrelation_function), etcetera. The purpose of this entry is not to discuss how to do exploratory data analysis for time series modeling. You can check that [elsewhere](https://www.routledge.com/Time-Series-for-Data-Science-Analysis-and-Forecasting/Woodward-Sadler-Robertson/p/book/9780367537944). For now we'll assume that a good `auto-arima` model will consider up to `12` seasons:\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n#Transform to log scale for better fit\nlog_air_passengers = log.(passengers.passengers)\n\n#Fit the 'best' arima (in real life increase max_P, max_Q, etc)\nmodel = auto_arima(log_air_passengers; seasonal = 12)\nforecast_model = forecast(model, 30) #Predict next 30 months\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.julia .cell-code}\n#Show the forecast\nPlots.plot(model, forecast_model; title = \"Classic ARIMA\", label = \"\")\n```\n\n::: {.cell-output-display}\n![Predicciones del modelo ARIMA clásico](index_files/figure-html/unnamed-chunk-6-J1.png){fig-align='center' fig-alt='Gráfica que muestra una serie de tiempo de pasajeros en aerolíneas junto con la predicción realizada por el modelo ARIMA. Se puede observar que la predicción captura las fluctuaciones mensuales del modelo correctamente y que los intervalos no explotan al infinito en el periodo de análisis' width=300}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}