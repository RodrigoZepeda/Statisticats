{
  "hash": "0e2026c715a696ea8565953db0a9b876",
  "result": {
    "markdown": "---\ntitle: \"Navidad/Christmas @ #rstats\"\nsubtitle: \"Intro to/a `rayrender`\"\ndate: \"2022-12-22\"\ncategories: [R, rayrender, Navidad / Christmas, gráficas / plots]\nimage: \"arbolito_navidad_2022.png\"\nlang: en\ndraft: false\nabstract: \"En esta entrada discutimos cómo hacer un arbolito de Navidad con [`rayrender`](https://www.rayrender.net/). In this entry we discuss how to build a Christmas tree with [`rayrender`](https://www.rayrender.net/)\"\ncrossref:\n  eq-prefix: equation\nformat:\n  html:\n    fig-align: center\n    code-fold: false\n---\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-important}\n## English tutorial\nFor the tutorial in English go to @sec-english-tutorial.\n:::\n\n## Tutorial en español {#sec-spanish-tutorial}\n\nEsta Navidad las [Rladies](https://rladies.org/mexico-rladies/) de Querétaro hicieron un concurso\npara realizar un árbol de Navidad con R y decidí participar. Esta vez no quería hacer el \ntípico arbolito con `ggplot2` así que decidí probar otra tecnología: [`rayrender`](https://www.rayrender.net/). \n\n`rayrender` es una librería para crear imágenes 3D mediante [trazado de rayos](https://es.wikipedia.org/wiki/Trazado_de_rayos) (raytracing). No es la \n[mejor opción open source para la tarea](https://www.blender.org/) pero ¡hey está en R!\n\nLa forma en la que `rayrender` funciona es consturyendo una escena y a partir de ésta agregar objetos\na la escena. Podemos empezar con una escena vacía de estudio fotográfico:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rayrender)\nscene_test <- generate_studio(depth = 0.2, \n                         material = diffuse(checkercolor = \"red\"))\n```\n:::\n\n\nPara poder ver previsualizar la escena se utiliza `render_scene`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_scene(scene_test, \n             samples = 100, #Muestras (+ muestras menos ruido)\n             preview = T,   #Si quieres previsualizar la escena antes de calcular\n             parallel = T   #Si realizar el cómputo en paralelo\n             )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_1.png){fig-align='center' width=240}\n:::\n:::\n\n\nSobre la escena podemos agregar objetos con `add_object`. En particular podemos agregar un cilindro para el tronco especificando sus coordenadas así como el material:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscene_test <- scene_test |> \n  add_object(\n    cylinder(\n      x = 0,\n      y = 0,\n      z = 0,\n      radius = 0.25,\n      length = 10,\n      material = diffuse(color = \"#725c42\")\n    )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_2.png){fig-align='center' width=240}\n:::\n:::\n\n\n\nHay diferentes materiales, por ejemplo `metal`, cabello `hair`, luz `light`, cristal `dielectric`, etc (la lista completa en [el apartado materials](https://www.rayrender.net/reference/index.html)) por lo que si quisiéramos hacer nuestro árbol de cristal bastaría cambiar el material:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscene_metal <- scene_test |> \n  add_object(\n    cylinder(\n      x = 0,\n      y = 0,\n      z = 0,\n      radius = 0.25,\n      length = 10,\n      material = metal(color = \"#725c42\")\n    )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_3.png){fig-align='center' width=240}\n:::\n:::\n\n\nPodemos cambiar la perspectiva de la cámara ajustando manualmente y dando `p` para obtener las coordenadas y luego imputarlas en el render:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_scene(scene_metal, \n             samples = 100, \n             preview = T, \n             parallel = T,\n             lookfrom = c(50.10, 7.25, 60.13), #Dónde está la cámara\n             lookat   = c(1, 5, 0), #Dónde está viendo la cámara\n             aperture = 0.5, #Apertura \n             fov = 17,\n             focal_distance = 77.66, #Distancia focal\n             iso = 400, #Sensibilidad \"del rollo fotográfico\" a la luz \n             clamp_value = 10\n             )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_4.png){fig-align='center' width=240}\n:::\n:::\n\n\nSobre nuestro árbol podemos agregar conos verdes. Agregamos varios conos en un `loop` para darle mayor figura.\nLo pondremos sobre un nuevo fondo (blanco) y con el tronco que hicimos previamente usando  `diffuse`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscene <- generate_studio(depth = 0.2) |>\n  add_object(\n    cylinder(\n      x = 0,\n      y = 0,\n      z = 0,\n      radius = 0.25,\n      length = 10,\n      material = diffuse(color = \"#725c42\")\n    )\n  ) \n\n#Conos\nfor (i in seq(1, 10, length.out = 20)){\n  scene <- scene |> \n    add_object(\n      cone(\n        start  = c(0, 6 - i/2, 0),\n        end    = c(0, 6 - (i/2 - 1), 0),\n        radius = i/3,\n        material = diffuse(color = \"darkgreen\")\n      )\n    )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_5.png){fig-align='center' width=240}\n:::\n:::\n\n\nFinalmente agregamos esferas luminosas de dos colores distintos: amarillas y rojas sobre las superficies de los conos aleatoriamente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(27522)\n#Esferas luminosas\nfor (i in seq(1, 10, length.out = 20)){\n  #Esferas rojas\n  for (k in runif(2*i, 0, 2*pi)){\n  scene <- scene |> \n    add_object(\n      sphere(\n        radius = 0.1,\n        y = 6 - i/2,    #Altura de la esfera\n        x = cos(k)*i/3, #Coordenadas polares para superficie de cono\n        z = sin(k)*i/3,\n        material = light(color = \"red\", intensity = 5)\n      )\n    )\n  }\n  #Esferas amarillas\n  for (k in runif(2*i, 0, 2*pi)){\n  scene <- scene |> \n    add_object(\n      sphere(\n        radius = 0.1,\n        y = 6 - i/2,    #Altura de la esfera\n        x = cos(k)*i/3, #Coordenadas polares para superficie de cono\n        z = sin(k)*i/3,\n        material = light(color = \"#f8d568\", intensity = 5)\n      )\n    )\n  }\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_6.png){fig-align='center' width=240}\n:::\n:::\n\n\nLa estrella se agrega hasta arriba con un polígono `extruded_polygon` que permite diseñar figuras. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Adaptado de la estrella de https://www.rayrender.net/index.html\nangulos  <- seq(0, 2*pi, length.out = 11)\nx        <- rev(c(rep(c(1,0.5), 5), 1)) * cos(angulos)\nz        <- rev(c(rep(c(1,0.5), 5), 1)) * sin(angulos)\npoligono <- data.frame(x = x, z = z)\nestrella <- rbind(poligono, 0.8*poligono)\n\n#Agregamos la estrella luminosa a la escena\nscene <- scene |>\n  add_object(\n    extruded_polygon(\n      estrella,\n      top = -0.5,\n      bottom = -1,\n      y = 7,    #Altura\n      z = 0.75, #Centrar\n      angle = c(90, 0, 90),\n      material = light(color = \"white\")\n    )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_7.png){fig-align='center' width=240}\n:::\n:::\n\n\nUna vez que está listo nuestro árbol nos preparamos para renderizarlo con suficientes muestras para eliminar todo el ruido:\n\n::: {.callout-warning}\nÉste proceso tarda varias horas\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(\"arbolito.png\")\nrender_scene(scene, \n             width = 500,    #Ancho en pixeles\n             height = 500,   #Alto en pixeles\n             samples = 10000, #Suficientes muestras!\n             preview = F, \n             parallel = T,\n             lookfrom = c(50.10, 7.25, 60.13), \n             lookat   = c(1, 5, 0), \n             aperture = 0.5, \n             fov = 17,\n             focal_distance = 77.66,\n             iso = 400, \n             clamp_value = 10\n             )\ndev.off()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](arbolito.png){fig-align='center' width=240}\n:::\n:::\n\n\nFinalmente al arbolito le agregamos texto de `Feliz Navidad`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(png)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggplot2)\n\n#Descarga de la fuente Passions Conflict\nfont_add_google(\"Passions Conflict\", \"pconflict\")\nshowtext_auto()\n\n#Leemos la imagen\narbol <- readPNG(\"arbolito.png\")\n\ndrawplot <- ggdraw() +\n  annotation_raster(arbol, xmin = 0, ymin = 0, xmax = 1, ymax = 1) +\n  geom_text(aes(x = 0.5, y = 0.1, label = \"Feliz Navidad\"), color = \"white\",\n            family = \"pconflict\", size = 15) +\n  geom_text(aes(x = 0.5, y = 0.95,\n                label = \"@RodZepeda | rodrigozepeda.github.io/Statisticats/Navidad\"),\n            color = \"gray75\",\n            size = 3) \nggsave(\"arbolito_navidad_2022_es.png\", drawplot, dpi = 100, width = 500, height = 500, units = \"px\")  \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](arbolito_navidad_2022_es.png){fig-align='center' width=250}\n:::\n:::\n\n\n## Tutorial in English {#sec-english-tutorial}\n\n::: {.callout-important}\n## Tutorial en español\nPara el tutorial en español ve a @sec-spanish-tutorial.\n:::\n\n\nThis Christmas [Rladies](https://rladies.org/mexico-rladies/) Querétaro created a contest. One was to build a Christmas tree in `R`. I decided to participate. This time I didn't want to do the typical `ggplot2` tree so I decided to test another technology: [`rayrender`](https://www.rayrender.net/). \n\n`rayrender` is a library to create 3D images using raytracing. This is not\n[the best open source option for this task](https://www.blender.org/), but hey, it's in R!\n\nThe way  `rayrender` works is by building a scene and adding objects to it. We can start with an empty study scene:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rayrender)\nscene_test <- generate_studio(depth = 0.2, \n                         material = diffuse(checkercolor = \"red\"))\n```\n:::\n\n\nTo preview the scene use `render_scene`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_scene(scene_test, \n             samples = 100, #More samples less noise\n             preview = T,   #To preview the scene (before calculating)\n             parallel = T   #Compute in parallel for extra speed\n             )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_1.png){fig-align='center' width=240}\n:::\n:::\n\n\nWe can add different objects onto the scene with `add_object`. In particular, we can add a cylinder for the tree trunk as well as its coordinates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscene_test <- scene_test |> \n  add_object(\n    cylinder(\n      x = 0,\n      y = 0,\n      z = 0,\n      radius = 0.25,\n      length = 10,\n      material = diffuse(color = \"#725c42\")\n    )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_2.png){fig-align='center' width=240}\n:::\n:::\n\n\nThere are different materials (e.g.  `metal`, `hair`, `light`, (crystal) `dielectric`, etc see [materials](https://www.rayrender.net/reference/index.html)). If we wish to make our tree metal we can just change the material:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscene_metal <- scene_test |> \n  add_object(\n    cylinder(\n      x = 0,\n      y = 0,\n      z = 0,\n      radius = 0.25,\n      length = 10,\n      material = metal(color = \"#725c42\")\n    )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_3.png){fig-align='center' width=240}\n:::\n:::\n\n\nWe can shift the camera's perspective by manually adjusting and obtain the coordinates with `p`. These coordinates can be inputed into the render:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrender_scene(scene_metal, \n             samples = 100, \n             preview = T, \n             parallel = T,\n             lookfrom = c(50.10, 7.25, 60.13), #Where camera is\n             lookat   = c(1, 5, 0), #What is camera watching\n             aperture = 0.5, \n             fov = 17,\n             focal_distance = 77.66, \n             iso = 400, #Sensitivity to light\n             clamp_value = 10\n             )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_4.png){fig-align='center' width=240}\n:::\n:::\n\n\nWe can add green cones to our tree. We do that with a `for` loop. We'll put that tree over a white background and with the previous trunk we had using `diffuse`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscene <- generate_studio(depth = 0.2) |>\n  add_object(\n    cylinder(\n      x = 0,\n      y = 0,\n      z = 0,\n      radius = 0.25,\n      length = 10,\n      material = diffuse(color = \"#725c42\")\n    )\n  ) \n\n#Cones\nfor (i in seq(1, 10, length.out = 20)){\n  scene <- scene |> \n    add_object(\n      cone(\n        start  = c(0, 6 - i/2, 0),\n        end    = c(0, 6 - (i/2 - 1), 0),\n        radius = i/3,\n        material = diffuse(color = \"darkgreen\")\n      )\n    )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_5.png){fig-align='center' width=240}\n:::\n:::\n\n\nFinally, we add light spheres of two colors: yellow and red. These go randomly over the cone's surface.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(27522)\nfor (i in seq(1, 10, length.out = 20)){\n  #Red spheres\n  for (k in runif(2*i, 0, 2*pi)){\n  scene <- scene |> \n    add_object(\n      sphere(\n        radius = 0.1,\n        y = 6 - i/2,    #Sphere height\n        x = cos(k)*i/3, #Polar coordinates for the cone's surface\n        z = sin(k)*i/3,\n        material = light(color = \"red\", intensity = 5)\n      )\n    )\n  }\n  #yellow spheres\n  for (k in runif(2*i, 0, 2*pi)){\n  scene <- scene |> \n    add_object(\n      sphere(\n        radius = 0.1,\n        y = 6 - i/2,    \n        x = cos(k)*i/3, \n        z = sin(k)*i/3,\n        material = light(color = \"#f8d568\", intensity = 5)\n      )\n    )\n  }\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_6.png){fig-align='center' width=240}\n:::\n:::\n\n\nWe add an  `extruded_polygon` for the star:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Adapted from the star at https://www.rayrender.net/index.html\nangulos  <- seq(0, 2*pi, length.out = 11)\nx        <- rev(c(rep(c(1,0.5), 5), 1)) * cos(angulos)\nz        <- rev(c(rep(c(1,0.5), 5), 1)) * sin(angulos)\npoligono <- data.frame(x = x, z = z)\nestrella <- rbind(poligono, 0.8*poligono)\n\n#Add the luminous star\nscene <- scene |>\n  add_object(\n    extruded_polygon(\n      estrella,\n      top = -0.5,\n      bottom = -1,\n      y = 7,    #Altura\n      z = 0.75, #Centrar\n      angle = c(90, 0, 90),\n      material = light(color = \"white\")\n    )\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](render_7.png){fig-align='center' width=240}\n:::\n:::\n\n\nOnce our tree is ready we render it with enough samples to eliminate the noise:\n\n::: {.callout-warning}\nThis process takes several hours\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(\"arbolito.png\")\nrender_scene(scene, \n             width = 500,    #Pixel width\n             height = 500,   #Pixel height\n             samples = 10000, #Enough samples\n             preview = F, \n             parallel = T,\n             lookfrom = c(50.10, 7.25, 60.13), \n             lookat   = c(1, 5, 0), \n             aperture = 0.5, \n             fov = 17,\n             focal_distance = 77.66,\n             iso = 400, \n             clamp_value = 10\n             )\ndev.off()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](arbolito.png){fig-align='center' width=240}\n:::\n:::\n\n\nFinally we add `Merry Christmas` text to the tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(png)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggplot2)\n\n#Download Passions Conflict from google fonts\nfont_add_google(\"Passions Conflict\", \"pconflict\")\nshowtext_auto()\n\n#Leemos la imagen\narbol <- readPNG(\"arbolito.png\")\n\ndrawplot <- ggdraw() +\n  annotation_raster(arbol, xmin = 0, ymin = 0, xmax = 1, ymax = 1) +\n  geom_text(aes(x = 0.5, y = 0.1, label = \"Merry Christmas\"), color = \"white\",\n            family = \"pconflict\", size = 15) +\n  geom_text(aes(x = 0.5, y = 0.95,\n                label = \"@RodZepeda | rodrigozepeda.github.io/Statisticats/Navidad\"),\n            color = \"gray75\",\n            size = 3) \nggsave(\"arbolito_navidad_2022_en.png\", drawplot, dpi = 100, width = 500, height = 500, units = \"px\")  \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](arbolito_navidad_2022_en.png){fig-align='center' width=250}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}